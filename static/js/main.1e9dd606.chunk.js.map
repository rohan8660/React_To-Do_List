{"version":3,"sources":["todos.js","addform.js","App.js","serviceWorker.js","index.js"],"names":["todos","deletetodo","todolist","length","map","todo","className","onClick","id","content","addform","state","whenchange","e","setState","target","value","whensubmit","preventDefault","props","addtodof","onSubmit","this","type","onChange","Component","App","Math","random","deltodo","console","log","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MAwBeA,EAtBH,YAAwB,IAAtBA,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WACXC,EAASF,EAAMG,OAEjBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,mBACX,0BAAMC,QAAS,WAAKN,EAAWI,EAAKG,MAAOH,EAAKI,aAM5D,uBAAGH,UAAU,UAAb,iCAGJ,OACI,yBAAKA,UAAU,oBACVJ,ICWEQ,E,4MA3BXC,MAAQ,CACJF,QAAQ,I,EAEZG,WAAY,SAACC,GACT,EAAKC,SAAS,CACVL,QAAQI,EAAEE,OAAOC,S,EAGzBC,WAAY,SAACJ,GACTA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKT,OACzB,EAAKG,SAAS,CACVL,QAAQ,M,uDAIZ,OACI,6BACI,0BAAMY,SAAUC,KAAKL,YACjB,+CACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,WAAYI,MAAOM,KAAKX,MAAMF,gB,GArB9DgB,aCsCPC,E,4MApCbf,MAAQ,CACNX,MAAO,CACL,CAAEQ,GAAI,EAAGC,QAAS,YAClB,CAAED,GAAI,EAAGC,QAAS,cAClB,CAAED,GAAI,EAAGC,QAAS,qB,EAGtBW,SAAU,SAACf,GACTA,EAAKG,GAAKmB,KAAKC,SACf,IAAI5B,EAAK,sBAAM,EAAKW,MAAMX,OAAjB,CAAuBK,IAChC,EAAKS,SAAS,CACZd,W,EAGJ6B,QAAS,SAACrB,GACRsB,QAAQC,IAAIvB,EAAG,cACf,IAAMR,EAAO,EAAKW,MAAMX,MAAMgC,QAAO,SAAA3B,GACnC,OAAOA,EAAKG,KAAMA,KAEpB,EAAKM,SAAS,CACZd,W,uDAIF,OACE,yBAAKM,UAAU,sBACb,wBAAIA,UAAU,oBAAd,UAGA,kBAAC,EAAD,CAAON,MAAOsB,KAAKX,MAAMX,MAAOC,WAAYqB,KAAKO,UACjD,kBAAC,EAAD,CAAST,SAAUE,KAAKF,gB,GA/BdK,aCSEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.1e9dd606.chunk.js","sourcesContent":["import React from 'react';\n\nconst todos=({todos, deletetodo})=>{\n    const todolist=todos.length ? \n    (\n        todos.map(todo=>{\n            return(\n                <div className=\"collection-item\">\n                    <span onClick={()=>{deletetodo(todo.id)}}>{todo.content}</span>\n                </div>\n            )\n        })\n    ) :\n    (\n        <p className=\"center\">You have no todo's left , yay</p>\n    );\n\n    return(\n        <div className=\"todos collection\">\n            {todolist}\n        </div>\n    );\n}\n\nexport default todos;\n","import React, { Component  } from \"react\";\n\nclass addform extends Component {\n    state = {  \n        content:\"\"\n    };\n    whenchange =(e) =>{\n        this.setState({\n            content:e.target.value\n        })\n    }\n    whensubmit =(e) =>{\n        e.preventDefault();\n        this.props.addtodof(this.state);\n        this.setState({\n            content:''\n        })\n    }\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.whensubmit}>\n                    <label>Add new todo</label>\n                    <input type=\"text\" onChange={this.whenchange} value={this.state.content} />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default addform;","import React, { Component } from \"react\";\nimport Todos from \"./todos\";\nimport Addtodo from \"./addform\"\nclass App extends Component {\n  state = {\n    todos: [\n      { id: 1, content: \"Meditate\" },\n      { id: 2, content: \"Read Books\" },\n      { id: 3, content: \"Play Mario Kart\" },\n    ],\n  };\n  addtodof =(todo) =>{\n    todo.id = Math.random();\n    let todos =[...this.state.todos,todo];\n    this.setState({\n      todos\n    })\n  }\n  deltodo =(id)=>{\n    console.log(id,\"deleted id\");\n    const todos =this.state.todos.filter(todo=>{\n      return todo.id !==id\n    })\n    this.setState({\n      todos\n    })\n  }\n  render() {\n    return (\n      <div className=\"todo-App container\">\n        <h1 className=\"center blue-text\">\n          Todo's\n        </h1>\n        <Todos todos={this.state.todos} deletetodo={this.deltodo}/>\n        <Addtodo addtodof={this.addtodof}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}